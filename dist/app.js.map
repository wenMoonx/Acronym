{"version":3,"sources":["../src/app.ts"],"sourcesContent":["import compression from 'compression';\nimport cookieParser from 'cookie-parser';\nimport cors from 'cors';\nimport express from 'express';\nimport helmet from 'helmet';\nimport hpp from 'hpp';\nimport morgan from 'morgan';\nimport swaggerJSDoc from 'swagger-jsdoc';\nimport swaggerUi from 'swagger-ui-express';\nimport { NODE_ENV, PORT, LOG_FORMAT, ORIGIN, CREDENTIALS } from '@config';\nimport { Routes } from '@interfaces/routes.interface';\nimport errorMiddleware from '@middlewares/error.middleware';\nimport { logger, stream } from '@utils/logger';\nimport { SwaggerConfig, generateDocumentation } from 'typescript-swagger';\nimport { dbConnection } from '@databases';\nimport { connect, set } from 'mongoose';\nimport path from 'path';\nimport { graphqlHTTP } from 'express-graphql';\nimport schemas from '@graphql/schemas';\nimport resolvers from '@graphql/resolvers';\n\nconst packageJson = require('../package.json');\nconst tsConfig = require('../tsconfig.json');\n\nconst swaggerConfig: SwaggerConfig = {\n  yaml: true,\n  name: 'API - Documentation',\n  description: packageJson.description,\n  basePath: '/',\n  host: 'localhost:3000',\n  version: packageJson.version,\n  outputDirectory: 'public',\n  entryFile: path.join('src', 'controllers', '**', '*.ts'),\n  decoratorConfig: {\n    useBuildIn: true,\n    useLibrary: ['typescript-rest', '@decorators/express'],\n  },\n  ignore: ['**/node_modules/**'],\n  consumes: ['application/json'],\n  produces: ['application/json'],\n};\nclass App {\n  public app: express.Application;\n  public env: string;\n  public port: string | number;\n\n  constructor(routes: Routes[]) {\n    this.app = express();\n    this.env = NODE_ENV || 'development';\n    this.port = PORT || 3000;\n\n    this.initializeMiddlewares();\n    this.connectToDatabase();\n    this.initializeRoutes(routes);\n    this.initializeSwagger();\n\n    this.app.use(\n      '/graphql',\n      graphqlHTTP((req, res, graphqlParams) => ({\n        schema: schemas,\n        rootValue: resolvers,\n        graphiql: true,\n        context: {\n          req,\n          res,\n        },\n      })),\n    );\n    this.initializeErrorHandling();\n  }\n\n  public listen() {\n    this.app.listen(this.port, () => {\n      logger.info(`=================================`);\n      logger.info(`======= ENV: ${this.env} =======`);\n      logger.info(`ðŸš€ App listening on the port ${this.port}`);\n      logger.info(`=================================`);\n    });\n  }\n\n  public getServer() {\n    return this.app;\n  }\n\n  private async connectToDatabase() {\n    if (this.env !== 'production') {\n      set('debug', true);\n    }\n    try {\n      await connect(dbConnection.url, dbConnection.options);\n      logger.info('MongoDB Connected.');\n    } catch (error) {\n      logger.info('MongoDB ConnectError:', error);\n    }\n  }\n  private initializeMiddlewares() {\n    this.app.use(morgan(LOG_FORMAT, { stream }));\n    // this.app.use(cors({ origin: ORIGIN, credentials: CREDENTIALS }));\n    // this.app.use(hpp());\n    // // this.app.use(helmet());\n    // this.app.use(compression());\n    this.app.use(express.json());\n    this.app.use(express.urlencoded({ extended: true }));\n    this.app.use(cookieParser());\n  }\n\n  private initializeRoutes(routes: Routes[]) {\n    routes.forEach(route => {\n      this.app.use('/', route.router);\n    });\n  }\n\n  private async initializeSwagger() {\n    await generateDocumentation(swaggerConfig, tsConfig);\n    const options = {\n      swaggerDefinition: {\n        info: {\n          title: 'REST API',\n          version: '1.0.0',\n          description: 'Example docs',\n        },\n      },\n      apis: ['swagger.yaml'],\n    };\n\n    const specs = swaggerJSDoc(options);\n    this.app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs));\n  }\n\n  private initializeErrorHandling() {\n    this.app.use(errorMiddleware);\n  }\n}\n\nexport default App;\n"],"names":["packageJson","require","tsConfig","swaggerConfig","yaml","name","description","basePath","host","version","outputDirectory","entryFile","path","join","decoratorConfig","useBuildIn","useLibrary","ignore","consumes","produces","App","listen","app","port","logger","info","env","getServer","connectToDatabase","set","connect","dbConnection","url","options","error","initializeMiddlewares","use","morgan","LOG_FORMAT","stream","express","json","urlencoded","extended","cookieParser","initializeRoutes","routes","forEach","route","router","initializeSwagger","generateDocumentation","swaggerDefinition","title","apis","specs","swaggerJSDoc","swaggerUi","serve","setup","initializeErrorHandling","errorMiddleware","constructor","NODE_ENV","PORT","graphqlHTTP","req","res","graphqlParams","schema","schemas","rootValue","resolvers","graphiql","context"],"mappings":"AAAA;;;;+BAsIA,SAAmB;;aAAnB,QAAmB;;qDArIM,eAAe;gDAEpB,SAAS;+CAGV,QAAQ;qDACF,eAAe;yDAClB,oBAAoB;wBACsB,UAAS;wDAE7C,gCAA+B;wBAC5B,gBAAe;mCACO,oBAAoB;2BAC5C,YAAY;0BACZ,UAAU;6CACtB,MAAM;gCACK,iBAAiB;gDACzB,kBAAkB;kDAChB,oBAAoB;;;;;;AAE1C,MAAMA,WAAW,GAAGC,OAAO,CAAC,iBAAiB,CAAC,AAAC;AAC/C,MAAMC,QAAQ,GAAGD,OAAO,CAAC,kBAAkB,CAAC,AAAC;AAE7C,MAAME,aAAa,GAAkB;IACnCC,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE,qBAAqB;IAC3BC,WAAW,EAAEN,WAAW,CAACM,WAAW;IACpCC,QAAQ,EAAE,GAAG;IACbC,IAAI,EAAE,gBAAgB;IACtBC,OAAO,EAAET,WAAW,CAACS,OAAO;IAC5BC,eAAe,EAAE,QAAQ;IACzBC,SAAS,EAAEC,KAAI,QAAA,CAACC,IAAI,CAAC,KAAK,EAAE,aAAa,EAAE,IAAI,EAAE,MAAM,CAAC;IACxDC,eAAe,EAAE;QACfC,UAAU,EAAE,IAAI;QAChBC,UAAU,EAAE;YAAC,iBAAiB;YAAE,qBAAqB;SAAC;KACvD;IACDC,MAAM,EAAE;QAAC,oBAAoB;KAAC;IAC9BC,QAAQ,EAAE;QAAC,kBAAkB;KAAC;IAC9BC,QAAQ,EAAE;QAAC,kBAAkB;KAAC;CAC/B,AAAC;AACF,IAAA,AAAMC,GAAG,GAAT,MAAMA,GAAG;IA8BAC,MAAM,GAAG;QACd,IAAI,CAACC,GAAG,CAACD,MAAM,CAAC,IAAI,CAACE,IAAI,EAAE,IAAM;YAC/BC,OAAM,OAAA,CAACC,IAAI,CAAC,CAAC,iCAAiC,CAAC,CAAC,CAAC;YACjDD,OAAM,OAAA,CAACC,IAAI,CAAC,CAAC,aAAa,EAAE,IAAI,CAACC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;YAChDF,OAAM,OAAA,CAACC,IAAI,CAAC,CAAC,4BAA4B,EAAE,IAAI,CAACF,IAAI,CAAC,CAAC,CAAC,CAAC;YACxDC,OAAM,OAAA,CAACC,IAAI,CAAC,CAAC,iCAAiC,CAAC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IACL;IAEOE,SAAS,GAAG;QACjB,OAAO,IAAI,CAACL,GAAG,CAAC;IAClB;UAEcM,iBAAiB,GAAG;QAChC,IAAI,IAAI,CAACF,GAAG,KAAK,YAAY,EAAE;YAC7BG,IAAAA,SAAG,IAAA,EAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QACrB,CAAC;QACD,IAAI;YACF,MAAMC,IAAAA,SAAO,QAAA,EAACC,UAAY,aAAA,CAACC,GAAG,EAAED,UAAY,aAAA,CAACE,OAAO,CAAC,CAAC;YACtDT,OAAM,OAAA,CAACC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QACpC,EAAE,OAAOS,KAAK,EAAE;YACdV,OAAM,OAAA,CAACC,IAAI,CAAC,uBAAuB,EAAES,KAAK,CAAC,CAAC;QAC9C,CAAC;IACH;IACQC,qBAAqB,GAAG;QAC9B,IAAI,CAACb,GAAG,CAACc,GAAG,CAACC,IAAAA,OAAM,QAAA,EAACC,OAAU,WAAA,EAAE;YAAEC,MAAM,EAANA,OAAM,OAAA;SAAE,CAAC,CAAC,CAAC;QAK7C,IAAI,CAACjB,GAAG,CAACc,GAAG,CAACI,QAAO,QAAA,CAACC,IAAI,EAAE,CAAC,CAAC;QAC7B,IAAI,CAACnB,GAAG,CAACc,GAAG,CAACI,QAAO,QAAA,CAACE,UAAU,CAAC;YAAEC,QAAQ,EAAE,IAAI;SAAE,CAAC,CAAC,CAAC;QACrD,IAAI,CAACrB,GAAG,CAACc,GAAG,CAACQ,IAAAA,aAAY,QAAA,GAAE,CAAC,CAAC;IAC/B;IAEQC,gBAAgB,CAACC,MAAgB,EAAE;QACzCA,MAAM,CAACC,OAAO,CAACC,CAAAA,KAAK,GAAI;YACtB,IAAI,CAAC1B,GAAG,CAACc,GAAG,CAAC,GAAG,EAAEY,KAAK,CAACC,MAAM,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACL;UAEcC,iBAAiB,GAAG;QAChC,MAAMC,IAAAA,kBAAqB,sBAAA,EAAChD,aAAa,EAAED,QAAQ,CAAC,CAAC;QACrD,MAAM+B,OAAO,GAAG;YACdmB,iBAAiB,EAAE;gBACjB3B,IAAI,EAAE;oBACJ4B,KAAK,EAAE,UAAU;oBACjB5C,OAAO,EAAE,OAAO;oBAChBH,WAAW,EAAE,cAAc;iBAC5B;aACF;YACDgD,IAAI,EAAE;gBAAC,cAAc;aAAC;SACvB,AAAC;QAEF,MAAMC,KAAK,GAAGC,IAAAA,aAAY,QAAA,EAACvB,OAAO,CAAC,AAAC;QACpC,IAAI,CAACX,GAAG,CAACc,GAAG,CAAC,WAAW,EAAEqB,iBAAS,QAAA,CAACC,KAAK,EAAED,iBAAS,QAAA,CAACE,KAAK,CAACJ,KAAK,CAAC,CAAC,CAAC;IACrE;IAEQK,uBAAuB,GAAG;QAChC,IAAI,CAACtC,GAAG,CAACc,GAAG,CAACyB,gBAAe,QAAA,CAAC,CAAC;IAChC;IArFAC,YAAYhB,MAAgB,CAAE;QAC5B,IAAI,CAACxB,GAAG,GAAGkB,IAAAA,QAAO,QAAA,GAAE,CAAC;QACrB,IAAI,CAACd,GAAG,GAAGqC,OAAQ,SAAA,IAAI,aAAa,CAAC;QACrC,IAAI,CAACxC,IAAI,GAAGyC,OAAI,KAAA,IAAI,IAAI,CAAC;QAEzB,IAAI,CAAC7B,qBAAqB,EAAE,CAAC;QAC7B,IAAI,CAACP,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAACiB,gBAAgB,CAACC,MAAM,CAAC,CAAC;QAC9B,IAAI,CAACI,iBAAiB,EAAE,CAAC;QAEzB,IAAI,CAAC5B,GAAG,CAACc,GAAG,CACV,UAAU,EACV6B,IAAAA,eAAW,YAAA,EAAC,CAACC,GAAG,EAAEC,GAAG,EAAEC,aAAa,GAAM,CAAA;gBACxCC,MAAM,EAAEC,QAAO,QAAA;gBACfC,SAAS,EAAEC,UAAS,QAAA;gBACpBC,QAAQ,EAAE,IAAI;gBACdC,OAAO,EAAE;oBACPR,GAAG;oBACHC,GAAG;iBACJ;aACF,CAAA,AAAC,CAAC,CACJ,CAAC;QACF,IAAI,CAACP,uBAAuB,EAAE,CAAC;IACjC;CA+DD;MAED,QAAmB,GAAJxC,GAAG"}