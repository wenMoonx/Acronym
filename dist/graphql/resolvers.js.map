{"version":3,"sources":["../../src/graphql/resolvers.ts"],"sourcesContent":["// import { isEmpty } from '@/utils/util';\n// import { HttpException } from '@exceptions/HttpException';\n// import { Acronym, AcronymGroup } from '@interfaces/acronym.interface';\n// import acronymModel from '@models/acronym.model';\n\n// const resolvers = {\n//   readAcronym: async ({ from, limit, search }: any): Promise<AcronymGroup> => {\n//     const findAcronyms: Acronym[] = await acronymModel\n//       .find({\n//         description: { $regex: search },\n//       })\n//       .skip(from)\n//       .limit(limit);\n//     return {\n//       isOnly: true,\n//       acronyms: findAcronyms,\n//     };\n//   },\n\n//   createAcronym: async ({ acronym, description }: any) => {\n//     if (isEmpty(acronym) || isEmpty(description)) throw new HttpException(400, 'AcronymData is empty');\n\n//     const findAcronym: Acronym = await acronymModel.findOne({ acronym: acronym });\n//     if (!isEmpty(findAcronym)) throw new HttpException(409, `This WTF:${acronym} already exists`);\n//     await acronymModel.create({\n//       acronym: acronym,\n//       description: description,\n//     });\n\n//     return true;\n//   },\n\n//   updateAcronym: async ({ nowAcronym, newAcronym, newDescription }: any) => {\n//     if (isEmpty(newAcronym) || isEmpty(newDescription)) throw new HttpException(400, 'acronymData is empty');\n\n//     const findNowAcronym: Acronym = await acronymModel.findOne({ acronym: nowAcronym });\n//     if (isEmpty(findNowAcronym)) throw new HttpException(409, 'Acronym does not exist');\n//     const findAcronym: Acronym = await acronymModel.findOne({ acronym: newAcronym });\n//     if (findAcronym && findAcronym.acronym != nowAcronym) throw new HttpException(409, `This WTF:${newAcronym} already exists`);\n\n//     await acronymModel.updateOne({ acronym: nowAcronym }, { acronym: newAcronym, description: newDescription });\n\n//     return true;\n//   },\n\n//   deleteAcronym: async ({ deleteAcronym }: any) => {\n//     const findAcronym: Acronym = await acronymModel.findOne({ acronym: deleteAcronym });\n//     if (isEmpty(findAcronym)) throw new HttpException(409, \"Acronym doesn't exist\");\n\n//     await acronymModel.deleteOne({ acronym: deleteAcronym });\n//     return true;\n//   },\n// };\n\n// export default resolvers;\n"],"names":[],"mappings":"AAAA"}