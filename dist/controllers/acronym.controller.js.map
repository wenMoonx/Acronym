{"version":3,"sources":["../../src/controllers/acronym.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { CreateAcronymDto } from '@dtos/acronym.dto';\nimport AcronymService from '@services/acronym.service';\nclass AcronymController {\n  public acronymService = new AcronymService();\n\n  public readAcronym = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const { from = 0, limit = 10, search = '' } = req.query;\n      const { acronyms, isOnly } = await this.acronymService.readAcronym(from as number, limit as number, search as string);\n\n      res.setHeader('isOnly', isOnly.toString());\n      res.status(200).json({\n        data: acronyms,\n        type: 'success',\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public createAcronym = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const acronymData: CreateAcronymDto = req.body;\n      const isSuccess = await this.acronymService.createAcronym(acronymData.acronym, acronymData.description);\n      if (isSuccess) {\n        res.status(200).json({\n          message: 'A new acronym created.',\n          type: 'success',\n        });\n      } else {\n        res.status(200).json({\n          message: 'Try again.',\n          type: 'failed',\n        });\n      }\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public updateAcronym = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const nowAcronym: string = req.params.nowAcronym;\n      const newAcronym: string = req.body.newAcronym;\n      const newDescription: string = req.body.newDescription;\n      const isSuccess = await this.acronymService.updateAcronym(nowAcronym, newAcronym, newDescription);\n      if (isSuccess) {\n        res.status(200).json({\n          message: 'The acronym updated successfully.',\n          type: 'success',\n        });\n      } else {\n        res.status(200).json({\n          message: 'Try again.',\n          type: 'failed',\n        });\n      }\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public deleteAcronym = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const acronym: string = req.params.acronym;\n      const isSuccess = await this.acronymService.deleteAcronym(acronym);\n      if (isSuccess) {\n        res.status(200).json({\n          message: 'The acronym deleted successfully.',\n          type: 'success',\n        });\n      } else {\n        res.status(200).json({\n          message: 'Try again.',\n          type: 'failed',\n        });\n      }\n    } catch (error) {\n      next(error);\n    }\n  };\n}\n\nexport default AcronymController;\n"],"names":["AcronymController","acronymService","AcronymService","readAcronym","req","res","next","from","limit","search","query","acronyms","isOnly","setHeader","toString","status","json","data","type","error","createAcronym","acronymData","body","isSuccess","acronym","description","message","updateAcronym","nowAcronym","params","newAcronym","newDescription","deleteAcronym"],"mappings":"AAAA;;;;+BAoFA,SAAiC;;aAAjC,QAAiC;;uDAlFN,6BAA2B;;;;;;AACtD,IAAA,AAAMA,iBAAiB,GAAvB,MAAMA,iBAAiB;;QACrB,KAAOC,cAAc,GAAG,IAAIC,eAAc,QAAA,EAAE,AAAC,CAAA;QAE7C,KAAOC,WAAW,GAAG,OAAOC,GAAY,EAAEC,GAAa,EAAEC,IAAkB,GAAoB;YAC7F,IAAI;gBACF,MAAM,EAAEC,IAAI,EAAG,CAAC,CAAA,EAAEC,KAAK,EAAG,EAAE,CAAA,EAAEC,MAAM,EAAG,EAAE,CAAA,EAAE,GAAGL,GAAG,CAACM,KAAK,AAAC;gBACxD,MAAM,EAAEC,QAAQ,CAAA,EAAEC,MAAM,CAAA,EAAE,GAAG,MAAM,IAAI,CAACX,cAAc,CAACE,WAAW,CAACI,IAAI,EAAYC,KAAK,EAAYC,MAAM,CAAW,AAAC;gBAEtHJ,GAAG,CAACQ,SAAS,CAAC,QAAQ,EAAED,MAAM,CAACE,QAAQ,EAAE,CAAC,CAAC;gBAC3CT,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;oBACnBC,IAAI,EAAEN,QAAQ;oBACdO,IAAI,EAAE,SAAS;iBAChB,CAAC,CAAC;YACL,EAAE,OAAOC,KAAK,EAAE;gBACdb,IAAI,CAACa,KAAK,CAAC,CAAC;YACd,CAAC;QACH,CAAC,AAAC,CAAA;QAEF,KAAOC,aAAa,GAAG,OAAOhB,GAAY,EAAEC,GAAa,EAAEC,IAAkB,GAAoB;YAC/F,IAAI;gBACF,MAAMe,WAAW,GAAqBjB,GAAG,CAACkB,IAAI,AAAC;gBAC/C,MAAMC,SAAS,GAAG,MAAM,IAAI,CAACtB,cAAc,CAACmB,aAAa,CAACC,WAAW,CAACG,OAAO,EAAEH,WAAW,CAACI,WAAW,CAAC,AAAC;gBACxG,IAAIF,SAAS,EAAE;oBACblB,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;wBACnBU,OAAO,EAAE,wBAAwB;wBACjCR,IAAI,EAAE,SAAS;qBAChB,CAAC,CAAC;gBACL,OAAO;oBACLb,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;wBACnBU,OAAO,EAAE,YAAY;wBACrBR,IAAI,EAAE,QAAQ;qBACf,CAAC,CAAC;gBACL,CAAC;YACH,EAAE,OAAOC,KAAK,EAAE;gBACdb,IAAI,CAACa,KAAK,CAAC,CAAC;YACd,CAAC;QACH,CAAC,AAAC,CAAA;QAEF,KAAOQ,aAAa,GAAG,OAAOvB,GAAY,EAAEC,GAAa,EAAEC,IAAkB,GAAoB;YAC/F,IAAI;gBACF,MAAMsB,UAAU,GAAWxB,GAAG,CAACyB,MAAM,CAACD,UAAU,AAAC;gBACjD,MAAME,UAAU,GAAW1B,GAAG,CAACkB,IAAI,CAACQ,UAAU,AAAC;gBAC/C,MAAMC,cAAc,GAAW3B,GAAG,CAACkB,IAAI,CAACS,cAAc,AAAC;gBACvD,MAAMR,SAAS,GAAG,MAAM,IAAI,CAACtB,cAAc,CAAC0B,aAAa,CAACC,UAAU,EAAEE,UAAU,EAAEC,cAAc,CAAC,AAAC;gBAClG,IAAIR,SAAS,EAAE;oBACblB,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;wBACnBU,OAAO,EAAE,mCAAmC;wBAC5CR,IAAI,EAAE,SAAS;qBAChB,CAAC,CAAC;gBACL,OAAO;oBACLb,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;wBACnBU,OAAO,EAAE,YAAY;wBACrBR,IAAI,EAAE,QAAQ;qBACf,CAAC,CAAC;gBACL,CAAC;YACH,EAAE,OAAOC,KAAK,EAAE;gBACdb,IAAI,CAACa,KAAK,CAAC,CAAC;YACd,CAAC;QACH,CAAC,AAAC,CAAA;QAEF,KAAOa,aAAa,GAAG,OAAO5B,GAAY,EAAEC,GAAa,EAAEC,IAAkB,GAAoB;YAC/F,IAAI;gBACF,MAAMkB,OAAO,GAAWpB,GAAG,CAACyB,MAAM,CAACL,OAAO,AAAC;gBAC3C,MAAMD,SAAS,GAAG,MAAM,IAAI,CAACtB,cAAc,CAAC+B,aAAa,CAACR,OAAO,CAAC,AAAC;gBACnE,IAAID,SAAS,EAAE;oBACblB,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;wBACnBU,OAAO,EAAE,mCAAmC;wBAC5CR,IAAI,EAAE,SAAS;qBAChB,CAAC,CAAC;gBACL,OAAO;oBACLb,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;wBACnBU,OAAO,EAAE,YAAY;wBACrBR,IAAI,EAAE,QAAQ;qBACf,CAAC,CAAC;gBACL,CAAC;YACH,EAAE,OAAOC,KAAK,EAAE;gBACdb,IAAI,CAACa,KAAK,CAAC,CAAC;YACd,CAAC;QACH,CAAC,AAAC,CAAA;;CACH;MAED,QAAiC,GAAlBnB,iBAAiB"}