{"version":3,"sources":["../../src/tests/users.test.ts"],"sourcesContent":["// import request from 'supertest';\n// import App from '@/app';\n// import { CreateUserDto } from '@dtos/users.dto';\n// import { User } from '@interfaces/users.interface';\n// import userModel from '@models/users.model';\n// import UserRoute from '@routes/users.route';\n\n// afterAll(async () => {\n//   await new Promise<void>(resolve => setTimeout(() => resolve(), 500));\n// });\n\n// describe('Testing Users', () => {\n//   describe('[GET] /users', () => {\n//     it('response statusCode 200 / findAll', () => {\n//       const findUser: User[] = userModel;\n//       const usersRoute = new UserRoute();\n//       const app = new App([usersRoute]);\n\n//       return request(app.getServer()).get(`${usersRoute.path}`).expect(200, { data: findUser, message: 'findAll' });\n//     });\n//   });\n\n//   describe('[GET] /users/:id', () => {\n//     it('response statusCode 200 / findOne', () => {\n//       const userId = 1;\n//       const findUser: User = userModel.find(user => user.id === userId);\n//       const usersRoute = new UserRoute();\n//       const app = new App([usersRoute]);\n\n//       return request(app.getServer()).get(`${usersRoute.path}/${userId}`).expect(200, { data: findUser, message: 'findOne' });\n//     });\n//   });\n\n//   describe('[POST] /users', () => {\n//     it('response statusCode 201 / created', async () => {\n//       const userData: CreateUserDto = {\n//         email: 'example@email.com',\n//         password: 'password',\n//       };\n//       const usersRoute = new UserRoute();\n//       const app = new App([usersRoute]);\n\n//       return request(app.getServer()).post(`${usersRoute.path}`).send(userData).expect(201);\n//     });\n//   });\n\n//   describe('[PUT] /users/:id', () => {\n//     it('response statusCode 200 / updated', async () => {\n//       const userId = 1;\n//       const userData: CreateUserDto = {\n//         email: 'example@email.com',\n//         password: 'password',\n//       };\n//       const usersRoute = new UserRoute();\n//       const app = new App([usersRoute]);\n\n//       return request(app.getServer()).put(`${usersRoute.path}/${userId}`).send(userData).expect(200);\n//     });\n//   });\n\n//   describe('[DELETE] /users/:id', () => {\n//     it('response statusCode 200 / deleted', () => {\n//       const userId = 1;\n//       const deleteUser: User[] = userModel.filter(user => user.id !== userId);\n//       const usersRoute = new UserRoute();\n//       const app = new App([usersRoute]);\n\n//       return request(app.getServer()).delete(`${usersRoute.path}/${userId}`).expect(200, { data: deleteUser, message: 'deleted' });\n//     });\n//   });\n// });\n"],"names":[],"mappings":"AAAA"}