{"version":3,"sources":["../../src/tests/users.test.ts"],"sourcesContent":["// import request from 'supertest';\r\n// import App from '@/app';\r\n// import { CreateUserDto } from '@dtos/users.dto';\r\n// import { User } from '@interfaces/users.interface';\r\n// import userModel from '@models/users.model';\r\n// import UserRoute from '@routes/users.route';\r\n\r\n// afterAll(async () => {\r\n//   await new Promise<void>(resolve => setTimeout(() => resolve(), 500));\r\n// });\r\n\r\n// describe('Testing Users', () => {\r\n//   describe('[GET] /users', () => {\r\n//     it('response statusCode 200 / findAll', () => {\r\n//       const findUser: User[] = userModel;\r\n//       const usersRoute = new UserRoute();\r\n//       const app = new App([usersRoute]);\r\n\r\n//       return request(app.getServer()).get(`${usersRoute.path}`).expect(200, { data: findUser, message: 'findAll' });\r\n//     });\r\n//   });\r\n\r\n//   describe('[GET] /users/:id', () => {\r\n//     it('response statusCode 200 / findOne', () => {\r\n//       const userId = 1;\r\n//       const findUser: User = userModel.find(user => user.id === userId);\r\n//       const usersRoute = new UserRoute();\r\n//       const app = new App([usersRoute]);\r\n\r\n//       return request(app.getServer()).get(`${usersRoute.path}/${userId}`).expect(200, { data: findUser, message: 'findOne' });\r\n//     });\r\n//   });\r\n\r\n//   describe('[POST] /users', () => {\r\n//     it('response statusCode 201 / created', async () => {\r\n//       const userData: CreateUserDto = {\r\n//         email: 'example@email.com',\r\n//         password: 'password',\r\n//       };\r\n//       const usersRoute = new UserRoute();\r\n//       const app = new App([usersRoute]);\r\n\r\n//       return request(app.getServer()).post(`${usersRoute.path}`).send(userData).expect(201);\r\n//     });\r\n//   });\r\n\r\n//   describe('[PUT] /users/:id', () => {\r\n//     it('response statusCode 200 / updated', async () => {\r\n//       const userId = 1;\r\n//       const userData: CreateUserDto = {\r\n//         email: 'example@email.com',\r\n//         password: 'password',\r\n//       };\r\n//       const usersRoute = new UserRoute();\r\n//       const app = new App([usersRoute]);\r\n\r\n//       return request(app.getServer()).put(`${usersRoute.path}/${userId}`).send(userData).expect(200);\r\n//     });\r\n//   });\r\n\r\n//   describe('[DELETE] /users/:id', () => {\r\n//     it('response statusCode 200 / deleted', () => {\r\n//       const userId = 1;\r\n//       const deleteUser: User[] = userModel.filter(user => user.id !== userId);\r\n//       const usersRoute = new UserRoute();\r\n//       const app = new App([usersRoute]);\r\n\r\n//       return request(app.getServer()).delete(`${usersRoute.path}/${userId}`).expect(200, { data: deleteUser, message: 'deleted' });\r\n//     });\r\n//   });\r\n// });\r\n"],"names":[],"mappings":"AAAA"}