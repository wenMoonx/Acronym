{"version":3,"sources":["../../src/utils/logger.ts"],"sourcesContent":["import { existsSync, mkdirSync } from 'fs';\nimport { join } from 'path';\nimport winston from 'winston';\nimport winstonDaily from 'winston-daily-rotate-file';\nimport { LOG_DIR } from '@config';\n\n// logs dir\nconst logDir: string = join(__dirname, LOG_DIR);\n\nif (!existsSync(logDir)) {\n  mkdirSync(logDir);\n}\n\n// Define log format\nconst logFormat = winston.format.printf(({ timestamp, level, message }) => `${timestamp} ${level}: ${message}`);\n\n/*\n * Log Level\n * error: 0, warn: 1, info: 2, http: 3, verbose: 4, debug: 5, silly: 6\n */\nconst logger = winston.createLogger({\n  format: winston.format.combine(\n    winston.format.timestamp({\n      format: 'YYYY-MM-DD HH:mm:ss',\n    }),\n    logFormat,\n  ),\n  transports: [\n    // debug log setting\n    new winstonDaily({\n      level: 'debug',\n      datePattern: 'YYYY-MM-DD',\n      dirname: logDir + '/debug', // log file /logs/debug/*.log in save\n      filename: `%DATE%.log`,\n      maxFiles: 30, // 30 Days saved\n      json: false,\n      zippedArchive: true,\n    }),\n    // error log setting\n    new winstonDaily({\n      level: 'error',\n      datePattern: 'YYYY-MM-DD',\n      dirname: logDir + '/error', // log file /logs/error/*.log in save\n      filename: `%DATE%.log`,\n      maxFiles: 30, // 30 Days saved\n      handleExceptions: true,\n      json: false,\n      zippedArchive: true,\n    }),\n  ],\n});\n\nlogger.add(\n  new winston.transports.Console({\n    format: winston.format.combine(winston.format.splat(), winston.format.colorize()),\n  }),\n);\n\nconst stream = {\n  write: (message: string) => {\n    logger.info(message.substring(0, message.lastIndexOf('\\n')));\n  },\n};\n\nexport { logger, stream };\n"],"names":["logger","stream","logDir","join","__dirname","LOG_DIR","existsSync","mkdirSync","logFormat","winston","format","printf","timestamp","level","message","createLogger","combine","transports","winstonDaily","datePattern","dirname","filename","maxFiles","json","zippedArchive","handleExceptions","add","Console","splat","colorize","write","info","substring","lastIndexOf"],"mappings":"AAAA;;;;;;;;;;;IAgESA,MAAM,MAANA,MAAM;IAAEC,MAAM,MAANA,MAAM;;oBAhEe,IAAI;sBACrB,MAAM;gDACP,SAAS;+DACJ,2BAA2B;wBAC5B,WAAS;;;;;;AAGjC,MAAMC,MAAM,GAAWC,IAAAA,KAAI,KAAA,EAACC,SAAS,EAAEC,OAAO,QAAA,CAAC,AAAC;AAEhD,IAAI,CAACC,IAAAA,GAAU,WAAA,EAACJ,MAAM,CAAC,EAAE;IACvBK,IAAAA,GAAS,UAAA,EAACL,MAAM,CAAC,CAAC;AACpB,CAAC;AAGD,MAAMM,SAAS,GAAGC,QAAO,QAAA,CAACC,MAAM,CAACC,MAAM,CAAC,CAAC,EAAEC,SAAS,CAAA,EAAEC,KAAK,CAAA,EAAEC,OAAO,CAAA,EAAE,GAAK,CAAC,EAAEF,SAAS,CAAC,CAAC,EAAEC,KAAK,CAAC,EAAE,EAAEC,OAAO,CAAC,CAAC,CAAC,AAAC;AAMhH,MAAMd,MAAM,GAAGS,QAAO,QAAA,CAACM,YAAY,CAAC;IAClCL,MAAM,EAAED,QAAO,QAAA,CAACC,MAAM,CAACM,OAAO,CAC5BP,QAAO,QAAA,CAACC,MAAM,CAACE,SAAS,CAAC;QACvBF,MAAM,EAAE,qBAAqB;KAC9B,CAAC,EACFF,SAAS,CACV;IACDS,UAAU,EAAE;QAEV,IAAIC,uBAAY,QAAA,CAAC;YACfL,KAAK,EAAE,OAAO;YACdM,WAAW,EAAE,YAAY;YACzBC,OAAO,EAAElB,MAAM,GAAG,QAAQ;YAC1BmB,QAAQ,EAAE,CAAC,UAAU,CAAC;YACtBC,QAAQ,EAAE,EAAE;YACZC,IAAI,EAAE,KAAK;YACXC,aAAa,EAAE,IAAI;SACpB,CAAC;QAEF,IAAIN,uBAAY,QAAA,CAAC;YACfL,KAAK,EAAE,OAAO;YACdM,WAAW,EAAE,YAAY;YACzBC,OAAO,EAAElB,MAAM,GAAG,QAAQ;YAC1BmB,QAAQ,EAAE,CAAC,UAAU,CAAC;YACtBC,QAAQ,EAAE,EAAE;YACZG,gBAAgB,EAAE,IAAI;YACtBF,IAAI,EAAE,KAAK;YACXC,aAAa,EAAE,IAAI;SACpB,CAAC;KACH;CACF,CAAC,AAAC;AAEHxB,MAAM,CAAC0B,GAAG,CACR,IAAIjB,QAAO,QAAA,CAACQ,UAAU,CAACU,OAAO,CAAC;IAC7BjB,MAAM,EAAED,QAAO,QAAA,CAACC,MAAM,CAACM,OAAO,CAACP,QAAO,QAAA,CAACC,MAAM,CAACkB,KAAK,EAAE,EAAEnB,QAAO,QAAA,CAACC,MAAM,CAACmB,QAAQ,EAAE,CAAC;CAClF,CAAC,CACH,CAAC;AAEF,MAAM5B,MAAM,GAAG;IACb6B,KAAK,EAAE,CAAChB,OAAe,GAAK;QAC1Bd,MAAM,CAAC+B,IAAI,CAACjB,OAAO,CAACkB,SAAS,CAAC,CAAC,EAAElB,OAAO,CAACmB,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC/D,CAAC;CACF,AAAC"}