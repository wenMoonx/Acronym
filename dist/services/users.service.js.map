{"version":3,"sources":["../../src/services/users.service.ts"],"sourcesContent":["import { hash } from 'bcrypt';\r\nimport { CreateUserDto } from '@dtos/users.dto';\r\nimport { HttpException } from '@exceptions/HttpException';\r\nimport { User } from '@interfaces/users.interface';\r\nimport userModel from '@models/users.model';\r\nimport { isEmpty } from '@utils/util';\r\n\r\nclass UserService {\r\n  public users = userModel;\r\n\r\n  public async findAllUser(): Promise<User[]> {\r\n    const users: User[] = this.users;\r\n    return users;\r\n  }\r\n\r\n  public async findUserById(userId: number): Promise<User> {\r\n    const findUser: User = this.users.find(user => user.id === userId);\r\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\r\n\r\n    return findUser;\r\n  }\r\n\r\n  public async createUser(userData: CreateUserDto): Promise<User> {\r\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\r\n\r\n    const findUser: User = this.users.find(user => user.email === userData.email);\r\n    if (findUser) throw new HttpException(409, `This email ${userData.email} already exists`);\r\n\r\n    const hashedPassword = await hash(userData.password, 10);\r\n    const createUserData: User = { id: this.users.length + 1, ...userData, password: hashedPassword };\r\n    this.users = [...this.users, createUserData];\r\n\r\n    return createUserData;\r\n  }\r\n\r\n  public async updateUser(userId: number, userData: CreateUserDto): Promise<User[]> {\r\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\r\n\r\n    const findUser: User = this.users.find(user => user.id === userId);\r\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\r\n\r\n    const hashedPassword = await hash(userData.password, 10);\r\n    const updateUserData: User[] = this.users.map((user: User) => {\r\n      if (user.id === findUser.id) user = { id: userId, ...userData, password: hashedPassword };\r\n      return user;\r\n    });\r\n\r\n    return updateUserData;\r\n  }\r\n\r\n  public async deleteUser(userId: number): Promise<User[]> {\r\n    const findUser: User = this.users.find(user => user.id === userId);\r\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\r\n\r\n    const deleteUserData: User[] = this.users.filter(user => user.id !== findUser.id);\r\n    return deleteUserData;\r\n  }\r\n}\r\n\r\nexport default UserService;\r\n"],"names":["UserService","findAllUser","users","findUserById","userId","findUser","find","user","id","HttpException","createUser","userData","isEmpty","email","hashedPassword","hash","password","createUserData","length","updateUser","updateUserData","map","deleteUser","deleteUserData","filter","userModel"],"mappings":"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"}