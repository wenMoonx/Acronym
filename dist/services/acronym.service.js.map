{"version":3,"sources":["../../src/services/acronym.service.ts"],"sourcesContent":["import { isEmpty } from '@/utils/util';\nimport { HttpException } from '@exceptions/HttpException';\nimport { Acronym, AcronymGroup } from '@interfaces/acronym.interface';\nimport acronymModel from '@models/acronym.model';\n// class AcronymService {\n//   public acronyms = acronymModel.readFile();\n//   public async readAcronym(from: number, limit: number, search: string): Promise<AcronymGroup> {\n//     const findAcronyms: Acronym[] = this.acronyms.filter(acronym => {\n//       const key = Object.keys(acronym)[0];\n//       if (key.search(search) !== -1 || acronym[key].search(search) !== -1) {\n//         return acronym;\n//       }\n//     });\n//     return {\n//       acronyms: findAcronyms.slice(Number(from), Number(from) + Number(limit) + 1),\n//       isOnly: findAcronyms.length >= limit,\n//     };\n//   }\n\n//   public async createAcronym(acronym: string, description: string) {\n//     if (this.acronyms.some((data: any) => Object.keys(data)[0] === acronym)) throw new HttpException(409, 'Acronym already exist');\n\n//     this.acronyms.push({ [acronym]: description });\n//     return acronymModel.writeFile(JSON.stringify(this.acronyms));\n//   }\n\n//   public async updateAcronym(nowAcronym: string, newAcronym: string) {\n//     const findAcronym: Acronym = this.acronyms.find(acronym => Object.keys(acronym)[0] === nowAcronym);\n//     if (!findAcronym) throw new HttpException(409, \"Acronym doesn't exist\");\n\n//     const updateAcronymData: Acronym[] = this.acronyms.map((acronym: any) => {\n//       if (Object.keys(acronym)[0] === nowAcronym) acronym = { [newAcronym]: acronym[nowAcronym] };\n//       return acronym;\n//     });\n\n//     return acronymModel.writeFile(JSON.stringify(updateAcronymData));\n//   }\n\n//   public async deleteAcronym(deleteAcronym: string) {\n//     const findAcronym: Acronym = this.acronyms.find(acronym => Object.keys(acronym)[0] === deleteAcronym);\n//     if (!findAcronym) throw new HttpException(409, \"Acronym doesn't exist\");\n\n//     const deleteAcronymData: Acronym[] = this.acronyms.filter(acronym => Object.keys(acronym)[0] !== deleteAcronym);\n\n//     return acronymModel.writeFile(JSON.stringify(deleteAcronymData));\n//   }\n// }\n\nclass AcronymService {\n  public acronyms = acronymModel;\n  public async readAcronym(from: number, limit: number, search: string): Promise<AcronymGroup> {\n    const findAcronyms: Acronym[] = await this.acronyms\n      .find({\n        description: { $regex: search },\n      })\n      .skip(from)\n      .limit(limit);\n    return {\n      isOnly: true,\n      acronyms: findAcronyms,\n    };\n  }\n\n  public async createAcronym(acronym: string, description: string) {\n    if (isEmpty(acronym) || isEmpty(description)) throw new HttpException(400, 'AcronymData is empty');\n\n    const findAcronym: Acronym = await this.acronyms.findOne({ acronym: acronym });\n    if (!isEmpty(findAcronym)) throw new HttpException(409, `This WTF:${acronym} already exists`);\n    await this.acronyms.create({\n      acronym: acronym,\n      description: description,\n    });\n\n    return true;\n  }\n\n  public async updateAcronym(nowAcronym: string, newAcronym: string, newDescription: string) {\n    if (isEmpty(newAcronym) || isEmpty(newDescription)) throw new HttpException(400, 'acronymData is empty');\n\n    const findNowAcronym: Acronym = await this.acronyms.findOne({ acronym: nowAcronym });\n    if (isEmpty(findNowAcronym)) throw new HttpException(409, 'Acronym does not exist');\n    const findAcronym: Acronym = await this.acronyms.findOne({ acronym: newAcronym });\n    if (findAcronym && findAcronym.acronym != nowAcronym) throw new HttpException(409, `This WTF:${newAcronym} already exists`);\n\n    await this.acronyms.updateOne({ acronym: nowAcronym }, { acronym: newAcronym, description: newDescription });\n\n    return true;\n  }\n\n  public async deleteAcronym(deleteAcronym: string) {\n    const findAcronym: Acronym = await this.acronyms.findOne({ acronym: deleteAcronym });\n    if (isEmpty(findAcronym)) throw new HttpException(409, \"Acronym doesn't exist\");\n\n    return await this.acronyms.deleteOne({ acronym: deleteAcronym });\n  }\n}\nexport default AcronymService;\n"],"names":["AcronymService","readAcronym","from","limit","search","findAcronyms","acronyms","find","description","$regex","skip","isOnly","createAcronym","acronym","isEmpty","HttpException","findAcronym","findOne","create","updateAcronym","nowAcronym","newAcronym","newDescription","findNowAcronym","updateOne","deleteAcronym","deleteOne","acronymModel"],"mappings":"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"}