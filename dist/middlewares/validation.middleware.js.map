{"version":3,"sources":["../../src/middlewares/validation.middleware.ts"],"sourcesContent":["import { plainToClass } from 'class-transformer';\nimport { validate, ValidationError } from 'class-validator';\nimport { RequestHandler } from 'express';\nimport { HttpException } from '@exceptions/HttpException';\n\nconst validationMiddleware = (\n  type: any,\n  value: string | 'body' | 'query' | 'params' = 'body',\n  skipMissingProperties = false,\n  whitelist = true,\n  forbidNonWhitelisted = true,\n): RequestHandler => {\n  return (req, res, next) => {\n    validate(plainToClass(type, req[value]), { skipMissingProperties, whitelist, forbidNonWhitelisted }).then((errors: ValidationError[]) => {\n      if (errors.length > 0) {\n        const message = errors.map((error: ValidationError) => Object.values(error.constraints)).join(', ');\n        next(new HttpException(400, message));\n      } else {\n        next();\n      }\n    });\n  };\n};\n\nexport default validationMiddleware;\n"],"names":["validationMiddleware","type","value","skipMissingProperties","whitelist","forbidNonWhitelisted","req","res","next","validate","plainToClass","then","errors","length","message","map","error","Object","values","constraints","join","HttpException"],"mappings":"AAAA;;;;+BAwBA,SAAoC;;aAApC,QAAoC;;kCAxBP,mBAAmB;gCACN,iBAAiB;+BAE7B,6BAA2B;AAEzD,MAAMA,oBAAoB,GAAG,CAC3BC,IAAS,EACTC,KAA2C,GAAG,MAAM,EACpDC,qBAAqB,GAAG,KAAK,EAC7BC,SAAS,GAAG,IAAI,EAChBC,oBAAoB,GAAG,IAAI,GACR;IACnB,OAAO,CAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,GAAK;QACzBC,IAAAA,eAAQ,SAAA,EAACC,IAAAA,iBAAY,aAAA,EAACT,IAAI,EAAEK,GAAG,CAACJ,KAAK,CAAC,CAAC,EAAE;YAAEC,qBAAqB;YAAEC,SAAS;YAAEC,oBAAoB;SAAE,CAAC,CAACM,IAAI,CAAC,CAACC,MAAyB,GAAK;YACvI,IAAIA,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;gBACrB,MAAMC,OAAO,GAAGF,MAAM,CAACG,GAAG,CAAC,CAACC,KAAsB,GAAKC,MAAM,CAACC,MAAM,CAACF,KAAK,CAACG,WAAW,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,AAAC;gBACpGZ,IAAI,CAAC,IAAIa,cAAa,cAAA,CAAC,GAAG,EAAEP,OAAO,CAAC,CAAC,CAAC;YACxC,OAAO;gBACLN,IAAI,EAAE,CAAC;YACT,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC,AAAC;MAEF,QAAoC,GAArBR,oBAAoB"}